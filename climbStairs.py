# 70. 爬楼梯
# https://leetcode.cn/problems/climbing-stairs/
# 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
# 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

# 示例 1：
# 输入：n = 2
# 输出：2
# 解释：有两种方法可以爬到楼顶。
# 1. 1 阶 + 1 阶
# 2. 2 阶

# 示例 2：
# 输入：n = 3
# 输出：3
# 解释：有三种方法可以爬到楼顶。
# 1. 1 阶 + 1 阶 + 1 阶
# 2. 1 阶 + 2 阶
# 3. 2 阶 + 1 阶

## 思路
## f(1)=1,f(2)=2, f(3)=3, f(4)=5, 符合斐波那契数列形式，f(n)=f(n-1)+f(n-2) 
## 因为每次只能爬1或2个台阶，所以爬n阶的方法种类由之前的爬n-1阶和爬n-2阶的方法种类决定，
## 爬到n-1阶后再爬1阶就到n阶，爬到n-2阶后再爬2阶就到n阶，这两类已经涵盖了所有情况，
## 即爬n阶的方法种类是爬n-1阶和爬n-2阶的方法种类的总和

class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            x = 1
        elif n == 2:
            x = 2
        elif n > 2:
            x1 = 1
            x2 = 2
            for i in range(n-2):
                x = x1 + x2
                x1 = x2
                x2 = x
        return x